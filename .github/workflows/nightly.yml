name: "nightly"

on: [push, pull_request]

env:
  HONEYCOMB_WRITEKEY: 7f3c63a70eecc61d635917de46bea4e6
  HONEYCOMB_DATASET: litmus tests

jobs:
  setup_matrix:
    name: "Setup Test Matrix"
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

    steps:
    - name: "Honeycomb: Start recording"
      uses: puppetlabs/kvrhdn-gha-buildevents@pdk-templates-v1
      with:
        apikey: ${{ env.HONEYCOMB_WRITEKEY }}
        dataset: ${{ env.HONEYCOMB_DATASET }}
        job-status: ${{ job.status }}

    - name: "Honeycomb: Start first step"
      run: |
        echo STEP_ID=setup-environment >> $GITHUB_ENV
        echo STEP_START=$(date +%s) >> $GITHUB_ENV

    - name: Checkout Source
      uses: actions/checkout@v2
      if: ${{ github.repository_owner == 'puppetlabs' }}

    - name: Activate Ruby 2.7
      uses: ruby/setup-ruby@v1
      if: ${{ github.repository_owner == 'puppetlabs' }}
      with:
        ruby-version: "2.7"
        bundler-cache: true

    - name: Print bundle environment
      if: ${{ github.repository_owner == 'puppetlabs' }}
      run: |
        echo ::group::bundler environment
        buildevents cmd $TRACE_ID $STEP_ID 'bundle env' -- bundle env
        echo ::endgroup::

    - name: "Honeycomb: Record Setup Environment time"
      if: ${{ github.repository_owner == 'puppetlabs' }}
      run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'Setup Environment'
        echo STEP_ID=Setup-Acceptance-Test-Matrix >> $GITHUB_ENV
        echo STEP_START=$(date +%s) >> $GITHUB_ENV

    - name: Setup Acceptance Test Matrix
      id: get-matrix
      if: ${{ github.repository_owner == 'puppetlabs' }}
      run: |
        if [ '${{ github.repository_owner }}' == 'puppetlabs' ]; then
          buildevents cmd $TRACE_ID $STEP_ID matrix_from_metadata -- bundle exec matrix_from_metadata_v2 > matrix.txt
          sed -i 's/litmusimage\/centos:7/macos-10.15/g' matrix.txt
          sed -i 's/litmusimage\/debian:10/macos-10.15/g' matrix.txt
          sed -i 's/litmusimage\/debian:9/macos-10.15/g' matrix.txt
          sed -i 's/litmusimage\/ubuntu:16.04/ubuntu-16.04/g' matrix.txt
          sed -i 's/litmusimage\/ubuntu:18.04/ubuntu-18.04/g' matrix.txt
          sed -i 's/litmusimage\/ubuntu:20.04/ubuntu-20.04/g' matrix.txt
          sed -i 's/windows-2019-core/windows-2019/g' matrix.txt
          cat matrix.txt
        else
          echo  "::set-output name=matrix::{}"
        fi

    - name: "Honeycomb: Record Setup Test Matrix time"
      if: ${{ always() }}
      run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'Setup Test Matrix'

  Acceptance:
    name: "${{ matrix.platforms.label }}, ${{ matrix.collection }}"
    needs:
      - setup_matrix

    runs-on: ${{ matrix.platforms.image }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup_matrix.outputs.matrix)}}

    env:
      BUILDEVENT_FILE: '../buildevents.txt'

    steps:
    - run: |
        echo 'platform=${{ matrix.platforms.image }}' >> $BUILDEVENT_FILE
        echo 'collection=${{ matrix.collection }}' >> $BUILDEVENT_FILE
        echo 'label=${{ matrix.platforms.label }}' >> $BUILDEVENT_FILE


    - name: "Honeycomb: Start recording"
      if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      uses: puppetlabs/kvrhdn-gha-buildevents@pdk-templates-v1
      with:
        apikey: ${{ env.HONEYCOMB_WRITEKEY }}
        dataset: ${{ env.HONEYCOMB_DATASET }}
        job-status: ${{ job.status }}
        matrix-key: ${{ matrix.platforms.label }}-${{ matrix.collection }}

    - name: "Honeycomb: start first step"
      if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      run: |
        echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-1 >> $GITHUB_ENV
        echo STEP_START=$(date +%s) >> $GITHUB_ENV

    - name: Checkout Source
      uses: actions/checkout@v2

    - name: Activate Ruby 2.7
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: "2.7"
        bundler-cache: true

    - name: Print bundle environment
      # if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      run: |
        echo ::group::bundler environment
        bundle env
        echo ::endgroup::

    - name: "Honeycomb: Record Setup Environment time"
      if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'Setup Environment'
        echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-2 >> $GITHUB_ENV
        echo STEP_START=$(date +%s) >> $GITHUB_ENV

    - name: Provision test environment
      if: ${{ startsWith(matrix.platforms.image, 'macos') == true }}
      run: |
        image="${{ matrix.platforms.label }}"
        image=$(echo "$image" | tr '[:upper:]' '[:lower:]')
        data=()
        for x in $(echo $image | tr '-' "\n"); do
          data+=("$x")
        done
        VAGRANT_IMAGE="generic/${data[0]}${data[1]}"
        bundle exec rake "litmus:provision[vagrant,$VAGRANT_IMAGE]"
        echo ::group::=== REQUEST ===
        cat request.json || true
        echo
        echo ::endgroup::
        echo ::group::=== INVENTORY ===
        if [ -f 'spec/fixtures/litmus_inventory.yaml' ];
        then
          FILE='spec/fixtures/litmus_inventory.yaml'
        elif [ -f 'inventory.yaml' ];
        then
          FILE='inventory.yaml'
        fi
        sed -e 's/password: .*/password: "[redacted]"/' < $FILE || true
        echo ::endgroup::

    - name: Cache gems
      if: ${{ startsWith(matrix.platforms.image, 'macos') == false }}
      uses: actions/cache@v2
      with:
        path: vendor/gems
        key: ${{ runner.os }}-pr-${{ hashFiles('**/Gemfile') }}
        restore-keys: |
          ${{ runner.os }}-pr-
          ${{ runner.os }}-

    - name: Prepare inventory file
      if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      run: |
        cat <<EOF >> spec/fixtures/litmus_inventory.yaml
        ---
        version: 2
        groups:
        - name: local
          targets:
          - uri: litmus_localhost
            config:
              transport: local
        - name: ssh_nodes
          targets: []
        - name: winrm_nodes
          targets: []
        EOF
  
    - name: Prepare inventory file
      if: ${{ startsWith(matrix.platforms.image, 'windows') == true }}
      shell: pwsh
      run: |
        $Content = @'
        ---
        version: 2
        groups:
        - name: local
          targets:
          - uri: litmus_localhost
            config:
              transport: local
        - name: ssh_nodes
          targets: []
        - name: winrm_nodes
          targets: []
        '@
        $Content | Set-Content -Path spec/fixtures/litmus_inventory.yaml

    - name: Install gems and puppet agent
      if: ${{ startsWith(matrix.platforms.image, 'windows') == true }}
      run: |
        bundle install
        bundle exec rake 'litmus:install_agent[${{ matrix.collection }}]'

    - name: Install gems and puppet agent
      if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      run: |
        bundle install
        sudo -u root env "PATH=$PATH" bundle exec rake 'litmus:install_agent[${{ matrix.collection }}]'

    - name: Install agent
      if: ${{ startsWith(matrix.platforms.image, 'macos') == true }}
      run: |
        re_debian="(^Debian)"
        osname="${{ matrix.platforms.label }}"
        if [[ $osname =~ $re_debian ]]; then
          bundle exec bolt task run provision::fix_secure_path --modulepath ./spec/fixtures/modules --targets '*' -i ./spec/fixtures/litmus_inventory.yaml
        fi
        bundle exec rake 'litmus:install_agent[${{ matrix.collection }}]'

    - name: Install module
      run: bundle exec rake 'litmus:install_module'

    - name: "Honeycomb: Record deployment times"
      if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      run: |
        echo ::group::honeycomb step
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'Deploy test system'
        echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-3 >> $GITHUB_ENV
        echo STEP_START=$(date +%s) >> $GITHUB_ENV
        echo ::endgroup::

    - name: Set up Cygwin
      if: ${{ startsWith(matrix.platforms.image, 'windows') == true }}
      uses: egor-tensin/setup-cygwin@v3
      with:
        platform: x64
        packages: cmake python3
    
    - name: blah
      if: ${{ startsWith(matrix.platforms.image, 'windows') == true }}
      run: |
        ls.exe -Al
        pwd.exe

    - name: Create /tmp directory
      if: ${{ startsWith(matrix.platforms.image, 'windows') == true }}
      shell: pwsh
      run: |
        New-Item -Path "C:\" -Name "tmp" -ItemType "directory"
        $TmpDirectory = "C:\tmp"
        $Acl = Get-ACL $TmpDirectory
        $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("everyone","FullControl","ContainerInherit,Objectinherit","none","Allow")
        $Acl.AddAccessRule($AccessRule)
        Set-Acl $TmpDirectory $Acl

    - name: Run acceptance tests
      if: ${{ startsWith(matrix.platforms.image, 'windows') == true }}
      run: bundle exec rake 'litmus:acceptance:localhost'
    
    - name: Run acceptance tests
      if: ${{ startsWith(matrix.platforms.image, 'ubuntu') == true }}
      run: sudo -u root env "PATH=$PATH" bundle exec rake 'litmus:acceptance:localhost'
    
    - name: Run acceptance tests
      if: ${{ startsWith(matrix.platforms.image, 'macos') == true }}
      run: bundle exec rake 'litmus:acceptance:parallel'

    - name: "Honeycomb: Record acceptance testing times"
      if: ${{ startsWith(matrix.platforms.label, 'ubuntu') == true }}
      run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'Run acceptance tests'
        echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-4 >> $GITHUB_ENV
        echo STEP_START=$(date +%s) >> $GITHUB_ENV

    - name: Remove test environment
      if: ${{ startsWith(matrix.platforms.label, 'macos') == true }}
      continue-on-error: true
      run: |
        if [[ -f inventory.yaml || -f spec/fixtures/litmus_inventory.yaml ]]; then
          bundle exec rake 'litmus:tear_down'
          echo ::group::=== REQUEST ===
          cat request.json || true
          echo
          echo ::endgroup::
        fi

    - name: "Honeycomb: Record removal times"
      if: ${{ startsWith(matrix.platforms.label, 'ubuntu') == true }}
      run: buildevents step $TRACE_ID $STEP_ID $STEP_START 'Remove test environment'

  # slack-workflow-status:
  #   if: always()
  #   name: Post Workflow Status To Slack
  #   needs:
  #     - Acceptance
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Slack Workflow Notification
  #       uses: puppetlabs/Gamesight-slack-workflow-status@pdk-templates-v1
  #       with:
  #         # Required Input
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #         # Optional Input
  #         channel: '#team-ia-bots'
  #         name: 'GABot'
